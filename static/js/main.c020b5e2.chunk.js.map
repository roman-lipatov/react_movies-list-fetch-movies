{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAddMovie","isInList","resetIsInList","useState","setMovie","setQuery","isLoading","setIsLoading","hasError","setHasError","handleSubmit","event","a","preventDefault","movieFromServer","newMovie","Title","Plot","Poster","imdbID","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","setIsInList","some","item","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c020b5e2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f51a2b4b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void,\n  isInList: boolean,\n  resetIsInList: () => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  onAddMovie,\n  isInList,\n  resetIsInList,\n}) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    const movieFromServer = await getMovie(query);\n\n    if ('Error' in movieFromServer) {\n      setHasError(true);\n      setIsLoading(false);\n    } else {\n      const newMovie = {\n        title: movieFromServer.Title,\n        description: movieFromServer.Plot,\n        imgUrl: movieFromServer.Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : movieFromServer.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n        imdbId: movieFromServer.imdbID,\n      };\n\n      setMovie(newMovie);\n      setIsLoading(false);\n    }\n  };\n\n  const changeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setHasError(false);\n    resetIsInList();\n  };\n\n  const clear = () => {\n    setMovie(null);\n    setQuery('');\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      onAddMovie(movie);\n      clear();\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': hasError,\n              })}\n              value={query}\n              onChange={changeQuery}\n            />\n          </div>\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {isInList && (\n            <p className=\"help is-danger\">\n              This movie is already added\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': isLoading,\n                },\n              )}\n              disabled={!query}\n            >\n              {movie\n                ? 'Search again'\n                : 'Find a movie'}\n            </button>\n          </div>\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [isInList, setIsInList] = useState(false);\n\n  const addMovie = (movie: Movie) => {\n    if (!movies.some(item => item.imdbId === movie.imdbId)) {\n      setMovies(currentMovies => [...currentMovies, movie]);\n    } else {\n      setIsInList(true);\n    }\n  };\n\n  const resetIsInList = () => {\n    setIsInList(false);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onAddMovie={addMovie}\n          isInList={isInList}\n          resetIsInList={resetIsInList}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}